{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\moldo\\\\Projects\\\\Smart-Brain\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport FaceRecognition from './components/FaceRecognition/FaceRecognition';\nimport Navigation from './components/Navigation/Navigation';\nimport Signin from './components/Signin/Signin';\nimport Register from './components/Register/Register';\nimport Logo from './components/Logo/Logo';\nimport ImageLinkForm from './components/ImageLinkForm/ImageLinkForm';\nimport Rank from './components/Rank/Rank';\nimport './App.css';\nconst app = new Clarifai.App({\n  apiKey: 'f043c901d66a4c1394ae6d3c79e16d27\\n'\n});\nconst initialState = {\n  input: '',\n  imageUrl: '',\n  box: {},\n  route: 'signin',\n  isSignedIn: false,\n  user: {\n    id: '',\n    name: '',\n    email: '',\n    entries: 0,\n    joined: ''\n  }\n};\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.loadUser = data => {\n      this.setState({\n        user: {\n          id: data.id,\n          name: data.name,\n          email: data.email,\n          entries: data.entries,\n          joined: data.joined\n        }\n      });\n    };\n\n    this.calculateFaceLocation = data => {\n      const clarifaiFace = data.outputs[0].data.regions[0].region_info.bounding_box;\n      const image = document.getElementById('inputimage');\n      const width = Number(image.width);\n      const height = Number(image.height);\n      return {\n        leftCol: clarifaiFace.left_col * width,\n        topRow: clarifaiFace.top_row * height,\n        rightCol: width - clarifaiFace.right_col * width,\n        bottomRow: height - clarifaiFace.bottom_row * height\n      };\n    };\n\n    this.displayFaceBox = box => {\n      this.setState({\n        box: box\n      });\n    };\n\n    this.onInputChange = event => {\n      this.setState({\n        input: event.target.value\n      });\n    };\n\n    this.onButtonSubmit = () => {\n      this.setState({\n        imageUrl: this.state.input\n      });\n      app.models.predict(Clarifai.FACE_DETECT_MODEL, this.state.input).then(response => {\n        console.log('hi', response);\n\n        if (response) {\n          fetch('http://localhost:3000/image', {\n            method: 'put',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              id: this.state.user.id\n            })\n          }).then(response => response.json()).then(count => {\n            this.setState(Object.assign(this.state.user, {\n              entries: count\n            }));\n          });\n        }\n\n        this.displayFaceBox(this.calculateFaceLocation(response));\n      }).catch(err => console.log(err));\n    };\n\n    this.onRouteChange = route => {\n      if (route === 'signout') {\n        this.setState({\n          isSignedIn: false\n        });\n      } else if (route === 'home') {\n        this.setState({\n          isSignedIn: true\n        });\n      }\n\n      this.setState({\n        route: route\n      });\n    };\n\n    this.state = initialState;\n  }\n\n  render() {\n    const {\n      isSignedIn,\n      imageUrl,\n      route,\n      box\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(Navigation, {\n        isSignedIn: isSignedIn,\n        onRouteChange: this.onRouteChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }, this), route === 'home' ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Logo, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Rank, {\n          name: this.state.user.name,\n          entries: this.state.user.entries\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(ImageLinkForm, {\n          onInputChange: this.onInputChange,\n          onButtonSubmit: this.onButtonSubmit\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(FaceRecognition, {\n          box: box,\n          imageUrl: imageUrl\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 23\n      }, this) : route === 'signin' ? /*#__PURE__*/_jsxDEV(Signin, {\n        loadUser: this.loadUser,\n        onRouteChange: this.onRouteChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 31\n      }, this) : /*#__PURE__*/_jsxDEV(Register, {\n        loadUser: this.loadUser,\n        onRouteChange: this.onRouteChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 31\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/moldo/Projects/Smart-Brain/src/App.js"],"names":["React","Component","FaceRecognition","Navigation","Signin","Register","Logo","ImageLinkForm","Rank","app","Clarifai","App","apiKey","initialState","input","imageUrl","box","route","isSignedIn","user","id","name","email","entries","joined","constructor","loadUser","data","setState","calculateFaceLocation","clarifaiFace","outputs","regions","region_info","bounding_box","image","document","getElementById","width","Number","height","leftCol","left_col","topRow","top_row","rightCol","right_col","bottomRow","bottom_row","displayFaceBox","onInputChange","event","target","value","onButtonSubmit","state","models","predict","FACE_DETECT_MODEL","then","response","console","log","fetch","method","headers","body","JSON","stringify","json","count","Object","assign","catch","err","onRouteChange","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport FaceRecognition from './components/FaceRecognition/FaceRecognition';\r\nimport Navigation from './components/Navigation/Navigation';\r\nimport Signin from './components/Signin/Signin';\r\nimport Register from './components/Register/Register';\r\nimport Logo from './components/Logo/Logo';\r\nimport ImageLinkForm from './components/ImageLinkForm/ImageLinkForm';\r\nimport Rank from './components/Rank/Rank';\r\nimport './App.css';\r\n\r\nconst app = new Clarifai.App({\r\n    apiKey: 'f043c901d66a4c1394ae6d3c79e16d27\\n'\r\n});\r\n\r\n\r\nconst initialState = {\r\n    input: '',\r\n    imageUrl: '',\r\n    box: {},\r\n    route: 'signin',\r\n    isSignedIn: false,\r\n    user: {\r\n        id: '',\r\n        name: '',\r\n        email: '',\r\n        entries: 0,\r\n        joined: ''\r\n    }\r\n}\r\n\r\n\r\nclass App extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = initialState;\r\n    }\r\n\r\n    loadUser = (data) => {\r\n        this.setState({user: {\r\n                id: data.id,\r\n                name: data.name,\r\n                email: data.email,\r\n                entries: data.entries,\r\n                joined: data.joined\r\n        }})\r\n    }\r\n\r\n    calculateFaceLocation = (data) => {\r\n        const clarifaiFace = data.outputs[0].data.regions[0].region_info.bounding_box;\r\n        const image = document.getElementById('inputimage');\r\n        const width = Number(image.width);\r\n        const height = Number(image.height);\r\n        return {\r\n            leftCol: clarifaiFace.left_col * width,\r\n            topRow: clarifaiFace.top_row * height,\r\n            rightCol: width - (clarifaiFace.right_col * width),\r\n            bottomRow: height - (clarifaiFace.bottom_row * height)\r\n        }\r\n    }\r\n\r\n    displayFaceBox = (box) => {\r\n        this.setState({box: box});\r\n    }\r\n\r\n    onInputChange = (event) => {\r\n        this.setState({input: event.target.value});\r\n    }\r\n\r\n    onButtonSubmit = () => {\r\n        this.setState({imageUrl: this.state.input});\r\n        app.models\r\n            .predict(\r\n                Clarifai.FACE_DETECT_MODEL,\r\n                this.state.input)\r\n            .then(response => {\r\n                console.log('hi', response)\r\n                if (response) {\r\n                    fetch('http://localhost:3000/image', {\r\n                        method: 'put',\r\n                        headers: {'Content-Type': 'application/json'},\r\n                        body: JSON.stringify({\r\n                            id: this.state.user.id\r\n                        })\r\n                    })\r\n                        .then(response => response.json())\r\n                        .then(count => {\r\n                            this.setState(Object.assign(this.state.user, { entries: count}))\r\n                        })\r\n\r\n                }\r\n                this.displayFaceBox(this.calculateFaceLocation(response))\r\n            })\r\n            .catch(err => console.log(err));\r\n    }\r\n\r\n    onRouteChange = (route) => {\r\n        if (route === 'signout') {\r\n            this.setState({isSignedIn: false})\r\n        } else if (route === 'home') {\r\n            this.setState({isSignedIn: true})\r\n        }\r\n        this.setState({route: route});\r\n    }\r\n\r\n    render() {\r\n        const { isSignedIn, imageUrl, route, box } = this.state;\r\n        return (\r\n            <div className=\"App\">\r\n                <Navigation isSignedIn={isSignedIn} onRouteChange={this.onRouteChange} />\r\n                { route === 'home'\r\n                    ? <div>\r\n                        <Logo />\r\n                        <Rank\r\n                            name={this.state.user.name}\r\n                            entries={this.state.user.entries}\r\n                        />\r\n                        <ImageLinkForm\r\n                            onInputChange={this.onInputChange}\r\n                            onButtonSubmit={this.onButtonSubmit}\r\n                        />\r\n                        <FaceRecognition box={box} imageUrl={imageUrl} />\r\n                    </div>\r\n                    : (\r\n                        route === 'signin'\r\n                            ? <Signin loadUser={this.loadUser} onRouteChange={this.onRouteChange}/>\r\n                            : <Register loadUser={this.loadUser} onRouteChange={this.onRouteChange}/>\r\n                    )\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}