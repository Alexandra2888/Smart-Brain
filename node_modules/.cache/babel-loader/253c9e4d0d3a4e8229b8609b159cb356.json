{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\moldo\\\\Projects\\\\Smart-Brain\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport Navigation from '../src/components/Navigation/Navigation';\nimport SignIn from '../src/components/Signin/Signin';\nimport Register from '../src/components/Register/Register';\nimport Logo from '../src/components/Logo/Logo';\nimport ImageLinkForm from '../src/components/ImageLinkForm/ImageLinkForm';\nimport FaceRecognition from '../src/components/FaceRecognition/FaceRecognition';\nimport Rank from '../src/components/Rank/Rank'; // set intial state of App component\n\nconst initialState = {\n  input: '',\n  imageUrl: '',\n  boxes: [],\n  route: 'signin',\n  user: {\n    id: '',\n    email: '',\n    password: '',\n    name: '',\n    entries: 0,\n    joined: ''\n  }\n};\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.loadUser = userData => {\n      const {\n        id,\n        name,\n        email,\n        entries,\n        joined\n      } = userData;\n      this.setState({\n        user: {\n          id: id,\n          name: name,\n          email: email,\n          entries: entries,\n          joined: joined\n        }\n      });\n    };\n\n    this.onInputHandler = event => {\n      this.setState({\n        input: event.target.value\n      });\n    };\n\n    this.onRouteChange = route => {\n      if (route === 'signout') {\n        this.setState(initialState);\n      }\n\n      this.setState({\n        route: route\n      });\n    };\n\n    this.displayFaceBoxes = boxes => {\n      this.setState({\n        boxes: boxes\n      });\n    };\n\n    this.calculateFaceLocations = resp => {\n      const image = document.getElementById('inputImage');\n      const width = Number(image.width);\n      const height = Number(image.height);\n      let faceLocations = []; // build an array of bounding boxes from the API response\n\n      resp.outputs[0].data.regions.map(region => faceLocations.push(region.region_info.bounding_box)); // convert the boxes to pixel coordinates\n\n      faceLocations = faceLocations.map(elem => {\n        return {\n          leftCol: elem.left_col * width,\n          topRow: elem.top_row * height,\n          rightCol: width - elem.right_col * width,\n          bottomRow: height - elem.bottom_row * height\n        };\n      });\n      return faceLocations;\n    };\n\n    this.onSubmitHandler = () => {\n      this.setState({\n        imageUrl: this.state.input\n      }); // send request to the Calrifai API for image prediction (face detection)\n\n      fetch('https://enigmatic-depths-30939.herokuapp.com/entryurl', {\n        method: 'post',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          input: this.state.input\n        })\n      }).then(clarifaiResp => clarifaiResp.json()).then(clarifaiResp => {\n        console.log(clarifaiResp); // if we get a response from the API\n\n        if (clarifaiResp) {\n          // send a request to our DB server to update the user's entries count\n          fetch('https://enigmatic-depths-30939.herokuapp.com/entry', {\n            method: 'put',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              id: this.state.user.id\n            })\n          }) // the server will respond with the user's updated entries count\n          .then(resp => resp.json()).then(count => {\n            this.setState({\n              user: { ...this.state.user,\n                entries: count\n              }\n            });\n          }).catch(console.log);\n        } // finally call calc/display face boxes functions\n\n\n        this.displayFaceBoxes(this.calculateFaceLocations(clarifaiResp));\n      }).catch(err => console.log('Big error', err));\n    };\n\n    this.state = initialState;\n  } // load user data on successful signin/register\n\n\n  render() {\n    const {\n      imageUrl,\n      route,\n      boxes,\n      user\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Navigation, {\n        route: route,\n        onRouteChange: this.onRouteChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 17\n      }, this), route === 'home' ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Logo, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Rank, {\n          user: user\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(ImageLinkForm, {\n          onInputHandler: this.onInputHandler,\n          onSubmitHandler: this.onSubmitHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(FaceRecognition, {\n          boxes: boxes,\n          imageUrl: imageUrl\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 23\n      }, this) : route === 'signin' ? /*#__PURE__*/_jsxDEV(SignIn, {\n        onRouteChange: this.onRouteChange,\n        loadUser: this.loadUser\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 31\n      }, this) : /*#__PURE__*/_jsxDEV(Register, {\n        onRouteChange: this.onRouteChange,\n        loadUser: this.loadUser\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 31\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/moldo/Projects/Smart-Brain/src/App.js"],"names":["React","Component","Navigation","SignIn","Register","Logo","ImageLinkForm","FaceRecognition","Rank","initialState","input","imageUrl","boxes","route","user","id","email","password","name","entries","joined","App","constructor","loadUser","userData","setState","onInputHandler","event","target","value","onRouteChange","displayFaceBoxes","calculateFaceLocations","resp","image","document","getElementById","width","Number","height","faceLocations","outputs","data","regions","map","region","push","region_info","bounding_box","elem","leftCol","left_col","topRow","top_row","rightCol","right_col","bottomRow","bottom_row","onSubmitHandler","state","fetch","method","headers","body","JSON","stringify","then","clarifaiResp","json","console","log","count","catch","err","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport Navigation from '../src/components/Navigation/Navigation';\r\nimport SignIn from '../src/components/Signin/Signin';\r\nimport Register from '../src/components/Register/Register';\r\nimport Logo from '../src/components/Logo/Logo';\r\nimport ImageLinkForm from '../src/components/ImageLinkForm/ImageLinkForm';\r\nimport FaceRecognition from '../src/components/FaceRecognition/FaceRecognition';\r\nimport Rank from '../src/components/Rank/Rank';\r\n\r\n\r\n// set intial state of App component\r\nconst initialState = {\r\n    input: '',\r\n    imageUrl: '',\r\n    boxes: [],\r\n    route: 'signin',\r\n    user: {\r\n        id: '',\r\n        email: '',\r\n        password: '',\r\n        name: '',\r\n        entries: 0,\r\n        joined: '',\r\n    }\r\n}\r\n\r\nclass App extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = initialState\r\n    }\r\n\r\n    // load user data on successful signin/register\r\n    loadUser = userData => {\r\n        const { id, name, email, entries, joined } = userData\r\n        this.setState({\r\n            user: {\r\n                id: id,\r\n                name: name,\r\n                email: email,\r\n                entries: entries,\r\n                joined: joined\r\n            }\r\n        })\r\n    }\r\n\r\n    onInputHandler = event => {\r\n        this.setState({ input: event.target.value })\r\n    }\r\n\r\n    // route detemines what elements are rendered by App\r\n    onRouteChange = route => {\r\n        if (route === 'signout') {\r\n            this.setState(initialState)\r\n        }\r\n        this.setState({ route: route })\r\n    }\r\n\r\n    // boxes are the locations of any faces deteced in submitted images\r\n    displayFaceBoxes = boxes => {\r\n        this.setState({ boxes: boxes })\r\n    }\r\n\r\n    // @param the response (face locations) from the Clarifai API request\r\n    // @return an array of objects which are the pixel coord's on the image\r\n    // for where to draw the boxes\r\n    calculateFaceLocations = resp => {\r\n        const image = document.getElementById('inputImage')\r\n        const width = Number(image.width);\r\n        const height = Number(image.height);\r\n        let faceLocations = []\r\n\r\n        // build an array of bounding boxes from the API response\r\n        resp.outputs[0].data.regions\r\n            .map(region => faceLocations.push(region.region_info.bounding_box))\r\n\r\n        // convert the boxes to pixel coordinates\r\n        faceLocations = faceLocations.map(elem => {\r\n            return {\r\n                leftCol: elem.left_col * width,\r\n                topRow: elem.top_row * height,\r\n                rightCol: width - (elem.right_col * width),\r\n                bottomRow: height - (elem.bottom_row * height)\r\n            }\r\n        })\r\n        return faceLocations\r\n    }\r\n\r\n    // when a user submits an image url\r\n    onSubmitHandler = () => {\r\n        this.setState({ imageUrl: this.state.input })\r\n        // send request to the Calrifai API for image prediction (face detection)\r\n        fetch('https://enigmatic-depths-30939.herokuapp.com/entryurl', {\r\n            method: 'post',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({\r\n                input: this.state.input\r\n            })\r\n        })\r\n            .then(clarifaiResp => clarifaiResp.json())\r\n            .then(clarifaiResp => {\r\n                console.log(clarifaiResp)\r\n                // if we get a response from the API\r\n                if (clarifaiResp) {\r\n                    // send a request to our DB server to update the user's entries count\r\n                    fetch('https://enigmatic-depths-30939.herokuapp.com/entry', {\r\n                        method: 'put',\r\n                        headers: { 'Content-Type': 'application/json' },\r\n                        body: JSON.stringify({\r\n                            id: this.state.user.id\r\n                        })\r\n                    })\r\n                        // the server will respond with the user's updated entries count\r\n                        .then(resp => resp.json())\r\n                        .then(count => {\r\n                            this.setState({\r\n                                user: {\r\n                                    ...this.state.user,\r\n                                    entries: count\r\n                                }\r\n                            })\r\n                        })\r\n                        .catch(console.log)\r\n                }\r\n                // finally call calc/display face boxes functions\r\n                this.displayFaceBoxes(this.calculateFaceLocations(clarifaiResp))\r\n            })\r\n            .catch(err => console.log('Big error', err))\r\n    }\r\n\r\n    render() {\r\n        const { imageUrl, route, boxes, user } = this.state\r\n\r\n        return (\r\n            <div>\r\n                <Navigation\r\n                    route={route}\r\n                    onRouteChange={this.onRouteChange} />\r\n\r\n                {route === 'home'\r\n                    ? <div>\r\n                        <Logo />\r\n                        <Rank\r\n                            user={user}\r\n                        />\r\n                        <ImageLinkForm\r\n                            onInputHandler={this.onInputHandler}\r\n                            onSubmitHandler={this.onSubmitHandler}\r\n                        />\r\n                        <FaceRecognition\r\n                            boxes={boxes}\r\n                            imageUrl={imageUrl}\r\n                        />\r\n                    </div>\r\n                    : (\r\n                        route === 'signin'\r\n                            ? <SignIn\r\n                                onRouteChange={this.onRouteChange}\r\n                                loadUser={this.loadUser}\r\n                            />\r\n                            : <Register\r\n                                onRouteChange={this.onRouteChange}\r\n                                loadUser={this.loadUser}\r\n                            />\r\n                    )\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}